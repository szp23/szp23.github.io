<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring框架的诞生</title>
    <link href="/2022/11/20/Spring%E6%A1%86%E6%9E%B6%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <url>/2022/11/20/Spring%E6%A1%86%E6%9E%B6%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="传统Javaweb开发困惑和解决方案"><a href="#传统Javaweb开发困惑和解决方案" class="headerlink" title="传统Javaweb开发困惑和解决方案"></a>传统Javaweb开发困惑和解决方案</h2><ol><li>问题一：传统Javaweb开发，层与层之间紧密耦合在一起，接口与实现类紧密耦合在一起</li><li>解决思路：程序代码中不需要手动new对象，第三方根据要求提供需要的Bean对象</li><li>问题二：传统Javaweb开发，通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中</li><li>解决思路：程序代码中不需要手动new对象，第三方根据程序需要，提供Bean对象的代理对象，进行功能增强</li></ol><h2 id="IOC、DI、和AOP思想的提出"><a href="#IOC、DI、和AOP思想的提出" class="headerlink" title="IOC、DI、和AOP思想的提出"></a>IOC、DI、和AOP思想的提出</h2><ol><li>IOC思想<ol><li>Inversion of Control 控制反转，原来在程序中创建Bean的权力反转给第三方进行创建</li></ol></li><li>DI思想<ol><li>Dependency Injection 依赖注入：强调Bean之间的关系，Bean之间的关系交给第三方控制</li></ol></li><li>AOP思想<ol><li>Aspect Oriented Programing 面向切面编程，功能的横向抽取，主要实现方式就是Proxy</li></ol></li></ol><h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><h3 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h3><ol><li>框架：是基于技术栈之上，众多业务抽取出来的解决方案</li><li>框架是一个半成品，使用框架可以提高开发效率，用简单的代码实现复杂的业务逻辑</li><li>框架底层使用大量的设计模式</li><li>框架一般都具备扩展性</li><li>有了框架，可以全身心的投入在纯业务开发</li><li>Java中常见的框架<ol><li>Mybatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>……</li></ol></li></ol><h3 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h3><ol><li>Spring是一个开源的轻量级的Java开发应用框架，可以简化企业级开发应用</li><li>Spring提供强大的IOC、AOP及Web MVC等功能</li><li>Spring生态完善，不管Spring哪个领域的解决方案都是依附在SpringFramework基础框架下</li></ol><h2 id="BeanFactory快速入门"><a href="#BeanFactory快速入门" class="headerlink" title="BeanFactory快速入门"></a>BeanFactory快速入门</h2><ol><li><p>创建maven工程,导入spring-context依赖</p><ol><li><pre><code class="pom.xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;    &lt;version&gt;5.3.22&lt;/version&gt;&lt;/dependency&gt;<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br><span class="hljs-number">2.</span> 定义UserService接口及其UserServiceImpl实现类<br><br>   <span class="hljs-number">1.</span> ```java<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">UserServiceImpl</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">UserService</span> &#123;<br>          <span class="hljs-comment">//DI注入</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> setUserDao(UserDao userDao)&#123;<br>              System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;di注入： &quot;</span> + userDao);<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;java<br>public interface UserService {<br>}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>3. 创建beans.xml配置文件，将UserServiceImpl的信息配置到该xml中<br><br>   1. ```xml<br>      <span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.song.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.song.spring.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>编写测试代码</p><ol><li>&#96;&#96;&#96;java<br>public class BeanFactoryTest {<br>public static void main(String[] args) {<br>    &#x2F;&#x2F;创建工厂对象<br>    DefaultListableBeanFactory factory &#x3D; new DefaultListableBeanFactory();<br>    &#x2F;&#x2F;创建读取器<br>    XmlBeanDefinitionReader reader &#x3D; new XmlBeanDefinitionReader(factory);<br>    &#x2F;&#x2F;读取xml配置文件给工厂<br>    reader.loadBeanDefinitions(“beans.xml”);<br>    &#x2F;&#x2F;根据id获取bean对象实例<br>    UserService userServices &#x3D; factory.getBean(“userService”, UserService.class);<br>    System.out.println(userServices);<br>}<br>}<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><br>      <br><br><span class="hljs-comment">## ApplicationContext快速入门</span><br><br><span class="hljs-number">1</span>. ApplicationContext称为Spring容器，内部封装了BeanFactory，比BeanFactory功能更加丰富，使用ApplicationContext进行开发，xml配置文件的名称习惯写为applicationContext.<span class="hljs-keyword">xml</span><br><br><span class="hljs-title">2</span>. 创建ApplicationContext加载配置文件，实例化容器<br><br>   <span class="hljs-number">1</span>. ```java<br>      ApplicationContext applicationContext = new ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>根据beanName获得容器中的bean对象实例</p><ol><li><pre><code class="java">UserService userService = applicationContext.getBean(&quot;userService&quot;, UserService.class);</code></pre></li></ol></li></ol><h2 id="BeanFactory和ApplicationContext的关系"><a href="#BeanFactory和ApplicationContext的关系" class="headerlink" title="BeanFactory和ApplicationContext的关系"></a>BeanFactory和ApplicationContext的关系</h2><ol><li>BeanFactory是Spring早期的接口，称为Spring的Bean工厂，ApplicationContext是后期更高级的接口，称为Spring容器</li><li>ApplicationContext在BeanFactory基础上堆功能进行了扩展，如监听功能，国际化功能，BeanFactory的API更偏向底层，ApplicationContext的API大多数是对底层API的封装</li><li>Bean创建的主要逻辑和功能都封装在BeanFactory中，ApplicationContext不仅继承了BeanFactory，而且ApplicationContext内部还维护着BeanFactory的引用，所以ApplicationContext和BeanFactory既有继承关系，又有融合关系</li><li>Bean的初始化时机不同，原始BeanFactory是在首次调用getBean时才进行Bean创建，而ApplicationContext则是在加载配置文件时，容器一创建就将Bean对象都实例化并初始化好</li><li>ApplicationContext除了继承BeanFactory外还继承了ApplicationEventPublisher(事件发布器)、ResourcesPatternReslover(资源解析器)、MessageSource(消息资源)等，但是ApplicationContext的核心功能还是BeanFactory</li></ol><h2 id="BeanFactory继承体系"><a href="#BeanFactory继承体系" class="headerlink" title="BeanFactory继承体系"></a>BeanFactory继承体系</h2><ol><li>BeanFactory是核心接口，项目执行中具体实现是DefaultListableBeanFactory，而ApplicationContext内部维护的BeanFactory的实现类也是它</li></ol><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6f17347286501ef3932d320cf2f2c90a?method=download&shareKey=480538d363194cf885eba1d209647f10" alt="BeanFactory继承体系"></p><h2 id="ApplicationContext继承体系"><a href="#ApplicationContext继承体系" class="headerlink" title="ApplicationContext继承体系"></a>ApplicationContext继承体系</h2><ol><li>ApplicatIonContext常用三个实现类<ol><li>ClassPathXMLApplicationContext <ol><li>加载类路径下的xml配置文件</li></ol></li><li>FileSystemXmlApplicationContext<ol><li>加载磁盘路径下的xml配置文件</li></ol></li><li>AnnotationConfigApplicationContext<ol><li>加载注解配置类的配置文件</li></ol></li></ol></li></ol><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe6f399af0b3281abf71b882ea8493184?method=download&shareKey=c022f83d58d9f4c202ba11db18c84c8c" alt="ApplicationContext继承体系"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆</title>
    <link href="/2022/11/20/%E5%A0%86/"/>
    <url>/2022/11/20/%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h1 id="堆的核心"><a href="#堆的核心" class="headerlink" title="堆的核心"></a>堆的核心</h1><h2 id="堆的核心概述"><a href="#堆的核心概述" class="headerlink" title="堆的核心概述"></a>堆的核心概述</h2><ol><li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域</li><li>Java堆区在JVM启动时候被创空间也是在启动的时候被确定下来，是JVM管理的最大的一块内存空间<ol><li>堆内存的大小是可以调节的</li></ol></li><li>Java虚拟机规范规定，堆可以处于物理上不连续的内存空间，但在逻辑上应该被视为连续的</li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区(TLAB)</li><li>Java虚拟机规范中对堆的描述是：所有的对象实例以及数组都应该在运行时分配在堆上，（也有特例对象不分配在堆上）</li><li>数组和对象永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置</li><li>在方法结束后，堆中的对象不会立马被移除，仅仅在垃圾收集的时候才会被移除</li><li>堆是GC（垃圾回收器）执行垃圾回收的重点区域</li></ol><h2 id="堆的核心概述：内存细分"><a href="#堆的核心概述：内存细分" class="headerlink" title="堆的核心概述：内存细分"></a>堆的核心概述：内存细分</h2><ol><li>现代垃圾收集器大部分都基于分代理论设计，堆空间分为：新生代、老年代和永久代(元空间)</li><li>Java7及之前堆内存逻辑分为新生代、老年代和永久代</li><li>Java8及之后堆内存逻辑分为新生代、老年代和元空间</li></ol><h2 id="堆内存的大小的设置和查看"><a href="#堆内存的大小的设置和查看" class="headerlink" title="堆内存的大小的设置和查看"></a>堆内存的大小的设置和查看</h2><h3 id="堆空间大小的设置"><a href="#堆空间大小的设置" class="headerlink" title="堆空间大小的设置"></a>堆空间大小的设置</h3><ol><li>Java堆空间用于存储Java对象实例，堆的大小在JVM启动时候就已经确定了，可以通过选项 -Xmx 和 -Xms来进行设置<ol><li>-Xmx：用于表示堆区的起始内存大小</li><li>-Xms：用于表示堆区的最大内存大小</li></ol></li><li>一旦堆区中的内存大小超过 -Xms所指定的最大内存大小，将会抛出OutOfMemoryError异常</li><li>通常将 -Xmx 和 -Xms两个参数配置相同的值，目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分格计算堆区的大小，提高性能</li><li>默认情况下，初始内存大小：物理电脑内存大小的64分之一，最大内存大小为：物理电脑内存大小的4分之一</li></ol><h3 id="堆空间大小的查看"><a href="#堆空间大小的查看" class="headerlink" title="堆空间大小的查看"></a>堆空间大小的查看</h3><ol><li>Jdk终端jps命令： 找到进程ID 再执行 jstat -gc 进程ID</li><li>设置虚拟机参数 -XX:+PrintGCDetails 查看</li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.song.jvm;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: JVM</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 堆空间大小设置和查看</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SongZhiPeng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022-11-20 17:12</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleHeapSpaceTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">totalMemory</span> <span class="hljs-operator">=</span> Runtime.getRuntime().totalMemory() / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">maxMemory</span> <span class="hljs-operator">=</span> Runtime.getRuntime().maxMemory() / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span>;<br>        System.out.println(<span class="hljs-string">&quot;堆内存空间总容量 = &quot;</span> + totalMemory + <span class="hljs-string">&quot;M&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;堆内存空间最大容量 = &quot;</span> + maxMemory + <span class="hljs-string">&quot;M&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;系统内存大小为 = &quot;</span> + totalMemory * <span class="hljs-number">64.0</span> / <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;G&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;系统内存大小为 = &quot;</span> + maxMemory * <span class="hljs-number">4.0</span> / <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;G&quot;</span>);<br><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            Thread.sleep(1000000);</span><br><span class="hljs-comment">//        &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">//            e.printStackTrace();</span><br><span class="hljs-comment">//        &#125;</span><br><br><span class="hljs-comment">//                堆内存空间总容量 = 245M</span><br><span class="hljs-comment">//                堆内存空间最大容量 = 3641M</span><br><span class="hljs-comment">//                系统内存大小为 = 15.3125G</span><br><span class="hljs-comment">//                系统内存大小为 = 14.22265625G</span><br>        <span class="hljs-comment">//        Heap</span><br>        <span class="hljs-comment">//        PSYoungGen      total 179200K, used 9216K [0x00000007b3800000, 0x00000007c0000000, 0x00000007c0000000)</span><br>        <span class="hljs-comment">//        eden space 153600K, 6% used [0x00000007b3800000,0x00000007b41001a0,0x00000007bce00000)</span><br>        <span class="hljs-comment">//        from space 25600K, 0% used [0x00000007be700000,0x00000007be700000,0x00000007c0000000)</span><br>        <span class="hljs-comment">//        to   space 25600K, 0% used [0x00000007bce00000,0x00000007bce00000,0x00000007be700000)</span><br>        <span class="hljs-comment">//        ParOldGen       total 409600K, used 0K [0x000000079a800000, 0x00000007b3800000, 0x00000007b3800000)</span><br>        <span class="hljs-comment">//        object space 409600K, 0% used [0x000000079a800000,0x000000079a800000,0x00000007b3800000)</span><br>        <span class="hljs-comment">//        Metaspace       used 3170K, capacity 4496K, committed 4864K, reserved 1056768K</span><br>        <span class="hljs-comment">//        class space    used 342K, capacity 388K, committed 512K, reserved 1048576K</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//        Process finished with exit code 0</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="OOM的说明和举例"><a href="#OOM的说明和举例" class="headerlink" title="OOM的说明和举例"></a>OOM的说明和举例</h2><h3 id="OOM的说明"><a href="#OOM的说明" class="headerlink" title="OOM的说明"></a>OOM的说明</h3><ol><li>OOM是存放Java实例对象和数组对象的Java堆内存空间不足，不能存放Java实例和数组对象而抛出的错误</li></ol><h3 id="OOM的举例"><a href="#OOM的举例" class="headerlink" title="OOM的举例"></a>OOM的举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.song.jvm;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@program</span>: JVM</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: OOM举例 -Xmx600M -Xms600</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: SongZhiPeng</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022-11-20 17:29</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OOMTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Picture&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">20</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Picture</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Picture</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] pixels;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Picture</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span>&#123;<br>        <span class="hljs-built_in">this</span>.pixels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="新生代与老年代"><a href="#新生代与老年代" class="headerlink" title="新生代与老年代"></a>新生代与老年代</h2><ol><li>存储在JVM中的Java对象可以被分为两类<ol><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡非常迅速</li><li>一类是对象的生命周期非常长，在某些极端环境下与JVM的生命周期相同</li></ol></li><li>Java堆中进一步划分的话可以分为：新生代和老年代，<ol><li>新生代可以分为Eden区和Survivor0区和Survivor1区，也叫From区，to区</li></ol></li><li>新生代区占整个堆的1&#x2F;3 默认-XX:NewRation&#x3D;2，可以修改新生代占整个堆的内存比例 通过 -XX:NewRatio&#x3D;值 ，一般不会调</li></ol><h2 id="新生代和老年代相关参数设置"><a href="#新生代和老年代相关参数设置" class="headerlink" title="新生代和老年代相关参数设置"></a>新生代和老年代相关参数设置</h2><ol><li>在HotSpot中Eden空间和另外两个Survivor区空间占比8：1：1</li><li>可以通过-XX:survivorRatio调整空间比例</li><li>几乎所有的Java对象都是在Eden区被new出来的</li><li>绝大多数Java对象的销毁在新生代进行，研究表明80%的对象都是朝生夕死</li></ol><h2 id="对象分配过程"><a href="#对象分配过程" class="headerlink" title="对象分配过程"></a>对象分配过程</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>new的对象先存放在Eden区</li><li>当Eden区空间满时，程序又创建对象，JVM的垃圾回收器将对Eden区进行垃圾回收（Minor GC）将Eden区中不被引用的对象进行垃圾回收销毁，再加载新的对象放到Eden区</li><li>然后将Eden区的幸存对象放到Survivor0（from幸存者区）</li><li>如果再触发垃圾回收，上次幸存下来的对象将放到Survivor1区（to幸存者区）同时年龄计数器 + 1 ，当年龄计数器达到阈值15时，会存放到老年代</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>针对幸存者区survivor0和survivor1区，再进行垃圾回收时，会将幸存的对象复制交换，谁为空，谁是to幸存者区，from幸存者区和to幸存者区不固定</li><li>关于垃圾回收：频繁发生在新生区，很少在老年区，几乎不在永久区&#x2F;元空间区</li></ol><h3 id="图例说明"><a href="#图例说明" class="headerlink" title="图例说明"></a>图例说明</h3><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3c57b75151b82338e43336eabf62ab86?method=download&shareKey=af74dd16150eff4ffc8afa49666a1e09" alt="堆对象分配过程"></p><h2 id="JVM常用调优工具"><a href="#JVM常用调优工具" class="headerlink" title="JVM常用调优工具"></a>JVM常用调优工具</h2><ol><li>JDK命令行</li><li>Jconsole</li><li>Visualvm</li><li>Jprofiler</li><li>……</li></ol><h2 id="Minor-GC、Major-GC、Full-GC"><a href="#Minor-GC、Major-GC、Full-GC" class="headerlink" title="Minor GC、Major GC、Full GC"></a>Minor GC、Major GC、Full GC</h2><ol><li>JVM在进行gc垃圾回收时，大部分被回收的都是指新生代</li><li>针对HotSpot 虚拟机的实现，它里面的GC按照回收区域分为两大类型：一部分是部分收集 Partial GC 一部分是整堆收集 Full GC</li><li>部分收集：不是完整的收集整个Java堆的垃圾收集，其中由分为<ol><li>新生代收集 Minor GC &#x2F;Yong GC 只是新生代的垃圾收集</li><li>老年代收集 Major GC&#x2F;Old GC 只是老年代的垃圾收集</li><li>混合收集 收集整个新生代和部分老年代的垃圾收集</li></ol></li><li>整堆收集：Full GC 收集整个Java堆和方法区的垃圾收集</li></ol><h2 id="分代式GC策略的触发条件"><a href="#分代式GC策略的触发条件" class="headerlink" title="分代式GC策略的触发条件"></a>分代式GC策略的触发条件</h2><ol><li>新生代GC（Minor GC）触发条件<ol><li>1.当新生代空间不足时，触发Minor GC 这里的新生代空间指的是Eden区，幸存者区满时不会触发Minor GC</li><li>因为Java对象大多都是朝生夕死的特性，所以Minor GC非常频繁，且回收速度非常快</li><li>Minor GC会引发STW,暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行</li></ol></li><li>老年代GC（Major GC）触发条件<ol><li>当对象从老年代消失时，我们说Major GC或者Full GC发生了</li><li>出现Marjor GC 至少会伴随着一次的Minor GC，但不是绝对的</li><li>Marjor GC的速度一般比Minor GC慢10倍以上，STW的时间更长</li><li>如果Marjor GC 后，内存还不足，就报OOM异常</li></ol></li><li>Full GC触发条件<ol><li>调用System.gc()方法时，系统执行Full GC</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor0（from幸存者）区向survivor1（to幸存者）区复制时，对象大小大于to幸存者区，则直接把对象转存到老年代，且老年代的可用内存大小小于该对象的大小</li></ol></li></ol><h2 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h2><h3 id="为什么需要把Java堆分代，不分代不能正常工作吗？"><a href="#为什么需要把Java堆分代，不分代不能正常工作吗？" class="headerlink" title="为什么需要把Java堆分代，不分代不能正常工作吗？"></a>为什么需要把Java堆分代，不分代不能正常工作吗？</h3><ol><li>研究表明 不同的对象生命周期不同，70%到99%的对象都是临时对象<ol><li>新生代有Eden区和两块大小相同的Survivor幸存者区构成to幸存者区总为空</li><li>老年代存放新生代中多次GC后仍然还存活的对象</li></ol></li><li>Java堆不分代完全可以，没有分代，所有的对象都在一块，GC进行垃圾回收时，需要将堆中的所有对象进行扫描判断哪些对象需要被销毁，但是大部分对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一块地方，将大大提升GC性能</li></ol><h2 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h2><ol><li>如果对象在Eden区出生，并且经过第一次Minor GC仍然存活，且from幸存者区空间充足，将被移动到from幸存者区，并且将对象年龄设为1，对象在幸存者区每经过一次Minor GC，年龄加1，当他的年龄达到阈值15，就会晋升到老年代区</li><li>幸存者区晋升到老年代区的年龄阈值可以通过虚拟机参数设置<ol><li>-XX:MaxTenuringThreshold来设置</li></ol></li><li>针对不同年龄段的对象分配如下<ol><li>优先分配Eden区</li><li>大对象直接分配到老年代</li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断<ol><li>如果幸存者区中相同年龄的对象大小总和大于幸存者区空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到规定的阈值年龄</li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Redis</title>
    <link href="/2022/11/20/%E5%88%9D%E5%A7%8BRedis/"/>
    <url>/2022/11/20/%E5%88%9D%E5%A7%8BRedis/</url>
    
    <content type="html"><![CDATA[<h1 id="认识NoSQL"><a href="#认识NoSQL" class="headerlink" title="认识NoSQL"></a>认识NoSQL</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ol><li>结构化</li><li>关联的</li><li>SQL查询</li><li>ACID</li></ol><h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><ol><li>非结构化</li><li>无关联的</li><li>非SQL</li><li>BASE</li></ol><h1 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>Redis是一个基于内存的键值型NoSQL数据库</li></ol><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ol><li>键值型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具有原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群，分片集群</li><li>支持多语言客户端</li></ol><h1 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h1><ol><li>进入redis安装目录 默认 &#x2F;usr&#x2F;local&#x2F;bin</li><li>Redis-server redis.conf目录位置</li></ol><h1 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h1><ol><li>redis-cli -h [host] -p [port]</li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
